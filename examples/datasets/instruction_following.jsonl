{"instruction": "Explain what recursion is in programming.", "output": "Recursion is a programming technique where a function calls itself to solve a problem by breaking it down into smaller, similar subproblems. It requires a base case to stop the recursion and a recursive case that breaks down the problem."}
{"instruction": "Write a Python function to calculate factorial.", "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)"}
{"instruction": "What is the difference between a list and a tuple in Python?", "output": "Lists are mutable (can be modified) and use square brackets [], while tuples are immutable (cannot be modified) and use parentheses (). Lists are for collections that may change, tuples for fixed data."}
{"instruction": "How do you handle errors in Python?", "output": "Use try-except blocks: try contains code that might raise an exception, except catches and handles the error. You can also use finally for cleanup code that runs regardless of errors."}
{"instruction": "Explain the concept of object-oriented programming.", "output": "Object-oriented programming (OOP) is a paradigm based on objects that contain data (attributes) and code (methods). Key principles include encapsulation, inheritance, polymorphism, and abstraction."}
