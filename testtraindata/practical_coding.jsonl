{"instruction": "Implement a function to reverse a linked list", "output": "def reverse_linked_list(head):\n    prev = None\n    current = head\n\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n\n    return prev"}
{"instruction": "Write a function to find all pairs in an array that sum to a target value", "output": "def find_pairs_with_sum(arr, target):\n    seen = set()\n    pairs = []\n\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen.add(num)\n\n    return pairs"}
{"instruction": "Create a function to read a CSV file and return a list of dictionaries", "output": "import csv\n\ndef read_csv_to_dict(filename):\n    with open(filename, 'r', encoding='utf-8') as file:\n        reader = csv.DictReader(file)\n        return list(reader)"}
{"instruction": "Write a function to make a GET request and handle errors gracefully", "output": "import requests\n\ndef fetch_data(url, timeout=10):\n    try:\n        response = requests.get(url, timeout=timeout)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching data: {e}\")\n        return None"}
{"instruction": "Create a function to safely execute SQL queries with parameterization", "output": "import sqlite3\n\ndef execute_query(db_path, query, params=()):\n    try:\n        conn = sqlite3.connect(db_path)\n        cursor = conn.cursor()\n        cursor.execute(query, params)\n        results = cursor.fetchall()\n        conn.commit()\n        conn.close()\n        return results\n    except sqlite3.Error as e:\n        print(f\"Database error: {e}\")\n        return None"}
